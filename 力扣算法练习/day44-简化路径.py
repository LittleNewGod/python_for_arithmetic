# -*- coding: utf-8 -*-
# @Time    : 2019/4/13 10:22
# @Author  : Xin
# @File    : day44-简化路径.py
# @Software: PyCharm

# 以Unix风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。
#
# 在Unix风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径vs相对路径
#
# 请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。
#
#
#
# 示例
# 1：
#
# 输入："/home/"
# 输出："/home"
# 解释：注意，最后一个目录名后面没有斜杠。
# 示例
# 2：
#
# 输入："/../"
# 输出："/"
# 解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。
# 示例
# 3：
#
# 输入："/home//foo/"
# 输出："/home/foo"
# 解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。
# 示例
# 4：
#
# 输入："/a/./b/../../c/"
# 输出："/c"
# 示例
# 5：
#
# 输入："/a/../../b/../c//.//"
# 输出："/c"
# 示例
# 6：
#
# 输入："/a//b////c/d//././/.."
# 输出："/a/b/c"

#解法：
# 首先使用split方法将字符串分割开来,然后使用while循环进行遍历.
#
# 1.当遇到元素为''或者'.'时,直接删除.
#
# 2.遇到元素为'..'时,如果此时i=0,则直接删除.否则将'..'与前一个元素一起删除.这个操作删除了2个元素,所以i -= 1
#
# 3.如果以上两种情况都没有遇见的话,直接i += 1.
#
# 最后输出即可.不需要额外的空间保存栈. 时间复杂度O(n),空间复杂度同样是O(n)

class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        a = path.split('/')
        i = 0
        while i < len(a):
            if a[i] == '' or a[i] == '.':
                del a[i]
            elif a[i] == '..':
                if i == 0:
                    del a[i]
                else:
                    del a[i - 1:i + 1]
                    i -= 1
            else:
                i += 1
        return '/' + '/'.join(a)


#path='/home//foo/'
path='/a/../../b/../c//.//'
s = Solution()
print(s.simplifyPath(path))